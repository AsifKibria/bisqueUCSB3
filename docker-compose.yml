# Author: Wahid Sadique Koly
# Date: 2025-Aug-27
# Will help you to easily build and run the application with persistent data and configurations
services:
  bisque:
    build: 
      context: .
      dockerfile: Dockerfile
    image: ${IMAGE_TAG:-bisque-ucsb:latest}
    container_name: ${CONTAINER_NAME:-bisque-server}
    ports:
      - "${BISQUE_PORT:-8080}:8080"
    volumes:
      # Preserve configuration directory
      - bisque_config:/source/config
      # Preserve data directory (uploaded files, database, etc.)
      - bisque_data:/source/data
      # Preserve reports directory
      - bisque_reports:/source/reports
      # Preserve public directory (uploaded files accessible via web)
      - bisque_public:/source/public
      # Optional: Mount modules directory if you want to persist custom modules
      - bisque_modules:/source/modules
      # Optional: Preserve staging directory for uploads
      - bisque_staging:/source/staging
    environment:
      # Server configuration
      - BISQUE_SERVER=${BISQUE_SERVER:-http://0.0.0.0:8080}
      - BISQUE_ADMIN_EMAIL=${BISQUE_ADMIN_EMAIL:-admin@yourdomain.com}
      - BISQUE_ADMIN_ID=${BISQUE_ADMIN_ID:-admin}
      - BISQUE_ORGANIZATION=${BISQUE_ORGANIZATION:-Your Organization}
      - BISQUE_TITLE=${BISQUE_TITLE:-BisQue Image Repository}
      # Optional database override
      - BISQUE_DBURL=${BISQUE_DBURL:-}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/image_service/formats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    networks:
      - bisque-net

  # if we want a proper postgres container
  # postgres:
  #   image: postgres:15
  #   container_name: bisque-postgres
  #   environment:
  #     POSTGRES_DB: bisque
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - bisque-net

volumes:
  # Named volumes for persistent data
  bisque_config:
    driver: local
  bisque_data:
    driver: local
  bisque_reports:
    driver: local
  bisque_public:
    driver: local
  bisque_modules:
    driver: local
  bisque_staging:
    driver: local
  # postgres_data:
  #   driver: local

networks:
  bisque-net:
    name: ${NETWORK_NAME:-bisque-network}
    driver: bridge
