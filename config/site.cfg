#####################################
# Site Names and server address
#####################################
# Top Level root .. Allows subservers

[servers]
# Allow site admins to configure a number of parallel servers
# per machine.  Can be used with proxying server such as
# apache, haproxy, nginx etc..
backend = uwsgi
#backend = paster

# control which servers are active
#servers = h1,h2,h3,h4,e1
servers = h1,e1
# Server definitions
# url = full url to proxy server
# services_enabled  = list of bisque_service to enable
# services_disabled = list of bisque_service to disable
# proxyroot =  the value of bisque.root for engines

h1.url = http://0.0.0.0:8080
h1.services_disabled = engine_service
# Extra params for uwsgi servers
#h1.uwsgi.socket = :3031
h1.uwsgi.socket = unix:///tmp/bisque.sock
# h1.uwsgi.threads = 8
h1.uwsgi.master = true
h1.uwsgi.processes = 16
h1.uwsgi.stats=/tmp/uwsgi.stats.sock
#h1.uwsgi.socket-timeout = 6000
h1.uwsgi.reload-on-as=32768
h1.uwsgi.reload-on-rss=8192
h1.bisque.static_files = false
# Example h1 with only image service, feature and helpers
#h1.services_enabled = blob_service, data_service, image_service, features

# You can define more than one host for paster when used with frontent proxy (haproxy)
# Not needed by uwsgi as it already run multiple background processes
#h2.url = http://localhost:9092
#h2.services_disabled = engine_service
#h3.url = http://localhost:9093
#h3.services_disabled = engine_service
#h4.url = http://localhost:9094
#h4.services_disabled = engine_service


# Engine on this host (enable this above in servers)
e1.url = http://0.0.0.0:27000
e1.services_enabled = engine_service
#e1.uwsgi.socket = :4041
e1.uwsgi.socket = unix:///tmp/engine.sock
e1.uwsgi.processes = 2
e1.uwsgi.master = true
e1.uwsgi.reload-on-as=8192
e1.bisque.has_database = false
e1.bisque.static_files = false
e1.beaker.session.type = file
# Extra params uwsgi
# e1.uwsgi.socket = unix:///tmp/engine.sock

# Define where the logs and PID files will go (otherwise will create in local dir)
#log_dir = /var/log/bisque
#pid_dir = /var/run/bisque

# Run a logging server.. very important if multiple bisques are running(uwsgi, paster)
# See
#logging_server = python contrib/logging/loggingwebmonitor.py  -c config/loggingwebmonitor.ini


###############################
# Extra filters to be added
#[filter:linesman]
# Linesname can be used for profiling
#use = egg:linesman#profiler


h1.services_enabled =
[app:main]
# pylons/paster config
use = egg:bqcore
full_stack = true
#filter-with = linesman


##########################################################
# Bisque Configuration
##########################################################
# Visible titles

bisque.organization = BisQue UCSB
bisque.title = BisQue Repository
bisque.admin_email = admins@biodev.ece.ucsb.edu
bisque.welcome_message = Welcome to the BisQue database

#bisque.background_query = welcome_background:
#bisque.background_resource  =
#set environment to development for test/debug
#bisque.js_environment = development
bisque.js_environment = production
#bisque.static_files = true

# server defaults
bisque.server = http://0.0.0.0:8080
bisque.services_disabled = engine_service
#bisque.services_enabled = client_service
#bisque.site = http://localhost:8080
bisque.installed = finished
bisque.paths.root = /source
bisque.paths.data = /source/data
bisque.paths.config = /source/config
bisque.paths.share = /source
bisque.paths.run = /source
bisque.paths.public = /source/public

bisque.logger = http://:9021/


# Blobservice
# Store paths all uploaded objects (into a store resource)
#bisque.blob_service.store_paths = true
# Use subtransactions for storing paths (must  be true ..   sqlite must use false but will fail)
bisque.blob_service.subtransaction = true

# Ordered list of stores .. path is created based on template
# bisque.blob_service.stores = irods1,s3,local
bisque.blob_service.stores = local

#bisque.stores.blobs.mounturl = file://$datadir/blobdir/$user/
#bisque.stores.blobs.top = file://$datadir/blobdir/
#bisque.stores.blobs.readonly = true


bisque.stores.local.mounturl = file://$datadir/imagedir/$user/
bisque.stores.local.top = file://$datadir/imagedir/
#bisque.stores.local.readonly = true


# Example irods store
#bisque.stores.irods1.mounturl=irods://data.iplantcollaborative.org/iplant/home/$user/bisque_data/uploads/$date/$filebase.$filehash$fileext
#bisque.stores.irods1.credentials=bisque:<password>
#bisque.stores.irods1.readonly = trueerv
# example S3
#bisque.stores.s3.path=s3://$user/
#bisque.stores.s3.credentials = <access_key>:<secret_key>
#bisque.stores.s3.bucket_id = None
#bisque.stores.s3.location = us-west

# Feature service
# Set if a feature is cached (all features are set to not cache by default)
#bisque.feature.default.cache = False
#set for specific feature
#bisque.feature.HTD.cache = False

# Data service
#bisque.data_service.caching=true
#bisque.data_service.server_cache=.server_cache
#bisque.data_service.max_response_time = 0
# Module Service
#bisque.module_service.queue_wait =  5

# Engine Service
bisque.engine = http://localhost:8080
#bisque.engine_service.local_modules = modules
#bisque.engine_service.poolsize = 4

# Image Service
#bisque.image_service.work_dir  = /run/bisque/workdir
#bisque.image_service.upload_dir  = /run/bisque/uploads
#bisque.image_service.remove_uploads = False
bisque.image_service.imgcnv.omp_num_threads = 4

# HTTP client
#bisque.http_client.cache_dir = data/client_cache

#
# Login identification  systems
# NOTE: you must also edit config/who.ini to enable these
#bisque.login.timeout=0  # no session expire
bisque.login.timeout=60
bisque.login.session_length=60480
bisque.login.providers = local
#bisque.login.providers =  iplant, local

#bisque.login.iplant.text = iPlant Login
#bisque.login.iplant.url = /auth_service/cas_login_handler
#bisque.login.iplant.icon = /images/signin/signin_iplant.png

#bisque.login.google.text = Google Login
#bisque.login.google.url = /auth_service/openid_login_handler?openid_provider=https://www.google.com/accounts/o9/id
#bisque.login.google.icon = /images/signin/signin_google.png

#bisque.login.yahoo.text = Yahoo Login
#bisque.login.yahoo.url = /auth_service/openid_login_handler?openid_provider=https://www.yahoo.com/
#bisque.login.yahoo.icon = /images/signin/signin_yahoo.png

bisque.login.local.text = Local Login
bisque.login.local.url = /auth_service/login
bisque.login.local.icon = /images/signin/signin_bisque.png
bisque.local.password = hashed

# User traffic tracking
# You can use google (http://www.google.com/analytics/)  or piwik (http://piwik.org/), etc.
#bisque.tracking = piwik.html
bisque.tracking = google.html
#bisque.tracking.piwik_url = http://yourpiwikhost.org
bisque.tracking.google_id  = UA-3923721-1


# Bisque Cluster Runtime
condor.enabled = False
condor.dag_template =
condor.submit_template =
condor.dag_config_template =
runtime.staging_base =
runtime.matlab_home =
runtime.mode = command


###############################################################
# Package dependencies config

# Beaker Sessions Config
# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions
#cache_dir = %(here)s/data
beaker.session.key = bq
beaker.session.secret = E1QQ4VSS
beaker.session.save_accessed_time = false
beaker.session.type = ext:database
beaker.session.sa.url = postgresql://bisque:bisque22@:5432/bq059testing
beaker.session.table_name = beaker_session
beaker.session.data_dir = /run/bisque/data/sessions/data
beaker.session.lock_dir = /run/bisque/data/sessions/lock

# Beaker Cache
beaker.cache.type = file
beaker.cache.data_dir = /run/bisque/data/beakercache
beaker.cache.lock_dir = /run/bisque/data/beakerlock
#beaker.cache.type=ext:memcached
#beaker.cache.url = 127.0.0.1:11211
#

# Paster  Config
error_email_from = bisque@localhost
email_to = bisque-dev@biodev.ece.ucsb.edu
error_subject_prefix = Bisque Error:
error_message = An Unexpected exception:
smtp_server = dough.ece.ucsb.edu

# TGExt.Registration2 Config
registration_config = %(here)s/registration.cfg
registration.site_name = Bisque (http://bisque.ece.ucsb.edu)
registration.mail.admin_email = kris@cs.ucsb.edu
registration.host = http://bisque.ece.ucsb.edu
registration.mail.smtp_server = dough.ece.ucsb.edu


# TurboMail Config
mail.on = True
mail.smtp.server = dough.ece.ucsb.edu
mail.manager = immediate
mail.transport = smtp

# SQLAlchemy
sqlalchemy.url = sqlite:////source/bisque.db
#sqlalchemy.url = postgresql://localhost:5432/bisque05
sqlalchemy.echo = false
sqlalchemy.echo_pool = false
sqlalchemy.pool_recycle = 3600
sqlalchemy.pool_pre_ping = true

# Repoze.who stuff
#  log_level is  'debug', 'info', 'warning', 'error'
#  log_file  is [ 'stdout' or path/to/who.log ]
who.config_file = %(here)s/who.ini
who.log_level = error
# log_stream can be stderr, stdout or a logger (see auth below)
who.log_stream = auth

#linesman profiler
bisque.profiler.enable = false
bisque.profiler.path = __profiler__

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
set debug = false

# if you are using Mako and want to be able to reload
# the mako template from disk during the development phase
# you should say 'true' here
# This option is only used for mako templating engine
# WARNING: if you want to deploy your application using a zipped egg
# (ie: if your application's setup.py defines zip-safe=True, then you
# MUST put "false" for the production environment because there will
# be no disk and real files to compare time with.
# On the contrary if your application defines zip-safe=False and is
# deployed in an unzipped manner, then you can leave this option to true
templating.mako.reloadfromdisk = true

# the compiled template dir is a directory that must be readable by your
# webserver. It will be used to store the resulting templates once compiled
# by the TemplateLookup system.
# During development you generally don't need this option since paste's HTTP
# server will have access to you development directories, but in production
# you'll most certainly want to have apache or nginx to write in a directory
# that does not contain any source code in any form for obvious security reasons.
templating.mako.compiled_templates_dir = /run/bisque/data/templates



#turn this setting to "min" if you would like tw to produce minified
#javascript files (if your library supports that)
toscawidgets.framework.resource_variant = debug


################################################################################
# Logging configuration
# Add additional loggers, handlers, formatters here
# Uses python's logging config file format
# http://docs.python.org/lib/logging-config-fileformat.html
# ERROR WARN INFO DEBUG
################################################################################

[loggers]
#keys = root, bq, bqroot, bqapi, sqlalchemy, auth, image, image-locks, import, export, blobs, usage, engine
keys = root, bqapi, bq,  sqlalchemy, auth

[handlers]
#keys = console, syslog, file, timedfile, pylog
keys = console,pylog

[formatters]
#keys = generic, syslog, full
keys = generic

###########################
# Loggers
# If you create additional loggers, add them as a key to [loggers] above

[logger_root]
level = ERROR
#handlers = console, syslog
handlers = console,pylog

[logger_bqapi]
level = WARN
handlers =
qualname = bqapi

[logger_bq]
level = INFO
handlers =
qualname = bq

#[logger_bqroot]
#level = INFO
#handlers =
#qualname = bq.root


#[logger_image]
#level = INFO
#handlers =
#qualname = bq.image_service

#[logger_image-locks]
#level = WARN
#handlers =
#qualname = bq.image_service.locks

#[logger_import]
#level = INFO
#handlers =
#qualname = bq.import_service

#[logger_export]
#level = INFO
#handlers =
#qualname = bq.export_service

#[logger_blobs]
#level = INFO
#handlers =
#qualname = bq.blobs

#[logger_usage]
#level = WARN
#handlers =
#qualname = bq.usage

#[logger_engine]
#level = INFO
#handlers =
#qualname = bq.engine_service

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

#[logger_sqlalchemy_pool]
#level = INFO
#handlers =
#qualname = sqlalchemy.pool
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)


# A logger for authentication, identification and authorization -- this is
# repoze.who and repoze.what:
[logger_auth]
level = WARN
handlers =
qualname = auth

#######################################
# Handlers
# If you create additional handlers, add them as a key to [handlers]
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

#[handler_file]
#class=handlers.RotatingFileHandler
#level=NOTSET
#formatter=generic
## Create bisque.log with 100MB max size and keeps 14 previous version
#args=('bisque.log', 'a', 100*1024*1024, 14)

# [handler_timedfile]
# class=handlers.TimedRotatingFileHandler
# level=NOTSET
# formatter=generic
# # Create bisque.log with 7 days/log and 14 weeks of backups
# args=('bisque.log', 'D', 7, 14)

#[handler_syslog]
#class=handlers.SysLogHandler
#level=NOTSET
#args=(('localhost', handlers.SYSLOG_UDP_PORT), handlers.SysLogHandler.LOG_LOCAL1)
#args=('/dev/log',handlers.SysLogHandler.LOG_LOCAL1)
#formatter= generic


[handler_pylog]
## Install a SocketListener like python-loggingserver
## see contrib/logging and enable the logging server in the [servers] section.
class= handlers.SocketHandler
level=NOTSET
formatter=generic
args=('logsvc', handlers.DEFAULT_TCP_LOGGING_PORT)

#########################################
# Formatters
# If you create additional formatters, add them as a key to [formatters]
[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

#[formatter_full]
#format = %(asctime)s,%(msecs)03d:%(process)d-%(thread)x: %(levelname)-5.5s [%(name)s] %(message)s
#datefmt = %H:%M:%S

#[formatter_syslog]
#format = %(levelname)s [%(name)s] %(message)s
